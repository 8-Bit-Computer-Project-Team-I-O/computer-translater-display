{
  "BE Architecture": "False",

  "twosComplement": "False",

  "control_words":{
      "0000": ["No operation (NOP)", "NO-OP"],
      "0001": ["Load value in memory address # in register A (LDA)", "LOAD TO A"],
      "0010": ["Add the value currently stored in memory address # to the value in register A (ADD)", "ADD TO A"],
      "0011": ["Subtract the value currently stored in memory address # to the value in register A (SUB)", "SUB FROM A"],
      "0100": ["Store the current value in register A into memory address # (STA)", "STORE FROM A"],
      "0101": ["Store the value # into register A (LDI)", "LOAD INSTANTLY TO A"],
      "0110": ["Jump to the instruction located in memory address # (JMP)", "JUMP"],
      "1110": ["Output the value in the register A to the display (OUT)", "OUTPUT"],
      "1000": ["If current value in register A is zero, jump to memory address # (JZ)", "JUMP IF 0"],
      "0111": ["If current value in register A requires more than 8 bits to represent, jump to memory address # (JC)", "JUMP IF CARRY"],
      "1111": ["Halt operation of the computer (HLT)", "HALT"],
      "1010": ["Invalid command. Do nothing.", "DNE"],
      "1100": ["Invalid command. Do nothing.", "DNE"],
      "1011": ["Invalid command. Do nothing.", "DNE"],
      "1001": ["Invalid command. Do nothing.", "DNE"],
      "1101": ["Invalid command. Do nothing.", "DNE"]
    },

  "micro_code_eater": {
    "0100000000000100": ["MI,CO", "memory_address_register", 4, "Program counter tells memory address register to run instruction at address #."],
    "0001010000001000": ["RO,II,CE", "instruction_register", 8, "Current instruction is sent from RAM to the instruction register ant the program counter is incremented."],
    "0000000000000000": ["NOP", "none", 8, "No operation currently performed by machine code."],
    "0100100000000000": ["MI, IO", "memory_address_register", 4, "Look at the current value in memory address #."],
    "0001001000000000": ["RO, AI", "a_register", 8, "Load the value # into the A register"],
    "0001000000100000": ["RO, BI", "b_register", 8, "Load the value # into the B register"],
    "0000001010000001": ["AI,EO", "a_register add", 8, "Store the sum # in the A register."],
    "0000001011000001": ["AI,EO,SU", "a_register sub", 8, "Store the difference # in the A register."],
    "0010000100000000":["RI,AO", "#", 8, "Store the current value # from the A register into address & in memory."],
    "0000101000000000": ["IO,AI", "a_register", 4, "Load the value # from the instruction register into the A register"],
    "0000100000000010": ["IO, J", "program_counter", 4, "Jump to address # in memory"],
    "0000000100010000": ["AO,OI", "output_register", 8, "Send the value in the A register to the output register"],
    "1000000000000000": ["HLT", "none", 0, "Stop operation of the computer"]
  },



  "ui_variables":{
    "memory_address_register": 0,
    "instruction_register": "",
    "a_register": 0,
    "b_register": 0,
    "a_register_display": 0,
    "b_register_display": 0,
    "program_counter": 0,
    "bus": 0,
    "bus_display": 0,
    "output_register": 0,
    "output_register_display": 0,
    "sum_register": 0,
    "sum_register_display": 0,
    "laymans": "",
    "carry_flag": 0,
    "zero_flag": 0,
    "carry_flag_toggle": 0,
    "zero_flag_toggle": 0,
    "0": "?",
    "1": "?",
    "2": "?",
    "3": "?",
    "4": "?",
    "5": "?",
    "6": "?",
    "7": "?",
    "8": "?",
    "9": "?",
    "10": "?",
    "11": "?",
    "12": "?",
    "13": "?",
    "14": "?",
    "15": "?"
  }


}