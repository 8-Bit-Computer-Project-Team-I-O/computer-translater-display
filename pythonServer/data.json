{
  "BE Architecture": "False",
  "twosComplement": "False",
  "control_words":{
      "0000": "No operation (NOP)",
      "0001": "Load value in memory address # in register A (LDA)",
      "0010": "Add the value currently stored in memory address # to the value in register A (ADD)",
      "0011": "Subtract the value currently stored in memory address # to the value in register A (SUB)",
      "0100": "Store the current value in register A into memory address # (STA)",
      "0101": "Store the value # into register A (LDI)",
      "0110": "Jump to the instruction located in memory address # (JMP)",
      "1110": "Output the value in the register A to the display (OUT)",
      "1000": "If current value in register A is zero, jump to memory address # (JZ)",
      "0111": "If current value in register A requires more than 8 bits to represent, jump to memory address # (JC)",
      "1111": "Halt operation of the computer (HLT)",
      "1010": "Invalid command. Do nothing.",
      "1100": "Invalid command. Do nothing.",
      "1011": "Invalid command. Do nothing.",
      "1001": "Invalid command. Do nothing.",
      "1101": "Invalid command. Do nothing."
    },

  "micro_code_eater": {
    "0100000000000100": ["MI,CO", "memory_address_register", 4, "Program counter tells memory address register to run instruction at address #."],
    "0001010000001000": ["RO,II,CE", "instruction_register", 8, "Current instruction is sent from RAM to the instruction register & program counter is incremented."],
    "0000000000000000": ["NOP", "none", 0, "No operation currently performed by machine code."],
    "0100100000000000": ["MI, IO", "memory_address_register", 4, "Look at the current value in memory address #."],
    "0001001000000000": ["RO, AI", "a_register", 8, "Load the value # into the A register"],
    "0001000000100000": ["RO, BI", "b_register", 8, "Load the value # into the B register"],
    "0000001010000001": ["AI,EO", "a_register", 8, "Add A and B register values together and store their sum in the A register."],
    "0000001011000001": ["AI,EO,SU", "a_register sub", 8, "Subtract A and B register values together and store their difference in the A register."],
    "0010000100000000":["RI,AO", "none", 8, "Store the current value in the A register into address # in memory."],
    "0000101000000000": ["IO,AI", "a_register", 8, "Load the value # from the instruction register into A register regardless of current value of A"],
    "0000100000000010": ["IO, J", "program_counter", 4, "Jump to address # in memory"],
    "0000000100010000": ["AO,OI", "output_register", 8, "Send the value in the A register to the output register"],
    "1000000000000000": ["HLT", "none", 0, "Stop operation of the computer"]
  },

  "ui_variables":{
    "memory_address_register": 0,
    "instruction_register": "",
    "a_register": 0,
    "b_register": 0,
    "program_counter": 0,
    "bus": 0,
    "output_register": 0,
    "sum_register": 0,
    "laymans": ""
  }


}